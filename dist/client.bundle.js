!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.ReduxShareClient=e():t.ReduxShareClient=e()}(this,function(){return function(t){function e(o){if(n[o])return n[o].exports;var i=n[o]={exports:{},id:o,loaded:!1};return t[o].call(i.exports,i,i.exports,e),i.loaded=!0,i.exports}var n={};return e.m=t,e.c=n,e.p="/dist/",e(0)}([function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),i=function(){function t(e,o){n(this,t);var i={autoReconnectDelay:1e3,autoReconnectMaxTries:null,shouldSend:null,debug:!1};this.options=Object.assign({},i,o),this.url=e,this.store=null,this.readyToSend=!1,this.connectTriesCount=0}return o(t,[{key:"getClientMiddleware",value:function(){var t=this;return function(e){return function(n){return function(o){var i=n(o);return t.readyToSend&&"server"!==o.origin&&t.send(o),"@@SYNC-CONNECT-SERVER-START"===o.type&&t.init(e),i}}}}},{key:"init",value:function(){var t=this,e=arguments.length<=0||void 0===arguments[0]?null:arguments[0];if(this.log("Initializing the socket"),this.ws=new WebSocket(this.url),null===e)throw"You must provide a redux store as the sole parameter of the init function.";this.store=e,this.ws.onerror=function(){t.store.dispatch({type:"@@SYNC-CONNECT-SERVER-FAILED",url:t.url})},this.ws.onopen=function(){this.log("Socket initialized, sending a dump of the full state to the server."),this.connectTriesCount=0;var t=this.store.getState()||{};this.readyToSend=!0,this.store.dispatch({type:"@@SYNC-CONNECT-SERVER-SUCCESS",state:t})}.bind(this),this.ws.onmessage=function(e){t.log("Received an action from the server",e.data),t.store.dispatch(JSON.parse(e.data))},this.ws.onclose=function(){t.readyToSend=!1,t.log("Socket closed."),t.reconnect()}}},{key:"send",value:function(t){if("function"!=typeof this.options.shouldSend||this.options.shouldSend(t)){var e=Object.assign({},t,{origin:"client"});this.log("Sending to the server the action ",e),this.ws.send(JSON.stringify(e))}}},{key:"reconnect",value:function(){null===this.options.autoReconnectMaxTries||this.connectTriesCount<this.options.autoReconnectMaxTries?(this.log("Reconnecting automatically... "+this.connectTriesCount++),setTimeout(this.init.bind(this,this.store),this.options.autoReconnectDelay)):this.connectTriesCount==this.options.autoReconnectMaxTries&&(this.log("Reached the maximum of authorized reconnect tries."),this.store.dispatch({type:"@@SYNC-CONNECT-SERVER-FAILED-FATAL",url:this.url}))}},{key:"log",value:function(){if(this.options.debug){var t;(t=console).log.apply(t,["redux-share-client: "].concat(Array.prototype.slice.call(arguments)))}}}]),t}();t.exports=i}])});